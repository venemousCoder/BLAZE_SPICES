<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blaze Recipes - Feeds</title>
    <link rel="stylesheet" href="/public/css/feeds.css" />
    <link rel="stylesheet" href="/public/css/home.css" />
    <link rel="stylesheet" href="/public/css/sidebar.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="shortcut icon"
      href="/public/assets/favicon/favicon.ico"
      type="image/x-icon"
    />
  </head>
  <body>
    <%#- include('./partials/header.ejs') %> 
    <%- include('./partials/header') %>
    <%- include('./partials/sidebar.ejs')%>
    <main class="feeds-page">
      <section class="search-section">
        <h1>See What Others Are Making</h1>
        <div class="search-bar">
          <input
            type="text"
            placeholder="Search for a recipe"
            aria-label="Search for a recipe"
          />
          <button class="filter-btn" aria-label="Filter options">
            <img src="/public/assets/filter-icon.svg" alt="Filter icon" />
          </button>
        </div>
      </section>

      <section class="user-list">
        <h2>Top Contributors</h2>
        <div class="user-scroll">
          <%#topUsers %>
          <% topUsers.forEach(user => { %>
          <div class="user-avatar">
            <img
              src="<%= user.profileImage %>"
              alt="<%= user.username %>'s profile"
            />
            <p><a class="author-link" href="/user/profile/<%=user._id%>"><%= user.username %></a></p>
          </div>
          <% }) %>
        </div>
      </section>

      <section class="popular-recipes">
        <h2>Popular Recipes</h2>
        <% recipe.forEach(recipe => { %>
          <div class="recipe-card">
            <a href="/user/recipe/<%= recipe._id %>" class="recipe-card-link">
              <% if (recipe.video) { %>              
                <video class="recipe-video" controls poster="<%= recipe.image || '/public/assets/recipe-video-placeholder.png' %>">
                  <source src="<%= recipe.video %>" type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              <% } else { %>
                <img
                  src="<%= recipe.image %>"
                  alt="Image of <%= recipe.title %>"
                  class="recipe-img"
                />
              <% } %>
              <%
                const totalMins = Number(recipe.cookingTime) + Number(recipe.preparationTime);
                let timeDisplay;
                if (totalMins > 60) {
                  const hours = Math.floor(totalMins / 60);
                  const mins = totalMins % 60;
                  timeDisplay = mins > 0 ? `${hours} hr ${mins} min` : `${hours} hr`;
                } else {
                  timeDisplay = `${totalMins} min`;
                }
              %>
              <span class="cook-time"><%= timeDisplay %></span>
              <h3><%= recipe.title %></h3>
              <p class="recipe-author">
                By <span class="author-name">
                  <a href="/user/profile/<%= recipe.owner._id %>" class="author-link"><%= recipe.owner.username %>
                  </a></span>
              </p>
            </a>
            <div class="recipe-actions">
              <button
                class="like-btn"
                aria-label="Like recipe"
                data-recipe-id="<%= recipe._id %>"
                data-liked="<%= recipe.likedBy?.includes(user._id) ? 'true' : 'false' %>"
              >
                <img
                  src="/public/assets/<%= recipe.likedBy?.includes(user._id) ? 'heartlike.svg' : 'heartlike-unlike.svg' %>"
                  alt="Like icon"
                  class="like-icon"
                />
                <span class="like-count"><%= recipe.likes%></span>
              </button>

              <button
                class="comment-btn"
                aria-label="Comment on recipe"
                onclick="window.location.href='/user/recipe/<%= recipe._id %>/comments'"
              >
                <img
                  src="/public/assets/comment-icon.svg"
                  alt="Comment icon"
                  class="comment-icon"
                />
                <span class="comment-count"
                  ><%= recipe.comments?.length || 0 %></span
                >
              </button>

              <button class="share-btn" aria-label="Share recipe">
                <img
                  src="/public/assets/share-unshare.svg"
                  alt="Share icon"
                  class="share-icon"
                />
                <span><%= recipe.sharesCount%></span>
                <button class="report-btn" 
                onclick="showReportModal('<%= recipe._id %>', '<%= recipe.title %>')"
                aria-label="Report recipe">
            <img src="/public/assets/flag.svg" alt="Report icon" class="report-icon"/>
        </button>
              </button>
            </div>
          </div>
          <% }) %>
        </div>
      </section>
    </main>

    <nav class="bottom-nav">
      <a href="/user/recipes" class="active">
        <img src="/public/assets/recipes-icon.svg" alt="Recipes icon" />
        Recipes
      </a>
      <a href="/user/explore">
        <img src="/public/assets/explore-icon.svg" alt="Explore icon" />
        Explore
      </a>
      <a href="/user/dashboard">
        <img src="/public/assets/profile-icon.svg" alt="Profile icon" />
        Profile
      </a>
    </nav>
    <div id="reportModal" class="modal">
      <div class="modal-content report-modal">
          <h2>Report Recipe</h2>
          <p class="recipe-title"></p>
          <form id="reportForm">
              <!-- Add hidden fields to match model -->
              <input type="hidden" id="reportRecipeId" name="reportedItem">
              <input type="hidden" name="itemType" value="Recipe">
  
              <div class="form-group">
                  <label for="reportType">Type of Report</label>
                  <select id="reportType" name="type" required>
                      <option value="">Select a reason</option>
                      <option value="spam">Spam or Misleading</option>
                      <option value="inappropriate">Inappropriate Content</option>
                      <option value="copyright">Copyright Violation</option>
                  </select>
              </div>
  
              <div class="form-group">
                  <label for="reportReason">Additional Details</label>
                  <textarea id="reportReason" 
                      name="reason" 
                      required 
                      placeholder="Please provide specific details about your report"></textarea>
              </div>
  
              <div class="modal-actions">
                  <button type="button" onclick="closeReportModal()" class="cancel-btn">Cancel</button>
                  <button type="submit" class="submit-btn">Submit Report</button>
              </div>
          </form>
      </div>
  </div>
    <nav class="bottom-nav">
      <button class="create-recipe-btn">
        <img src="/public/assets/testAddRecipe.svg" alt="Add Recipe" />
        Create Recipe
      </button>
    </nav>

    <!-- ADD RECIPE MODAL -->
    <div class="recipe-modal" id="recipeModal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Create New Recipe</h2>
        <!-- Replace the existing form inside recipe-modal div -->
        <form
          id="recipeForm"
          action="/user/recipes"
          method="POST"
          enctype="multipart/form-data"
        >
          <div class="form-group">
            <label for="title">Recipe Title</label>
            <input type="text" id="title" name="title" required />
          </div>

          <!-- Add this inside your recipe modal form, replacing the existing image upload section -->
<div class="form-group media-upload-section">
  <h2>Recipe Media</h2>
  <div class="media-type-selector">
      <button type="button" class="media-type-btn active" data-type="image">Image</button>
      <button type="button" class="media-type-btn" data-type="video">Video</button>
  </div>
  
  <div class="media-upload active" id="imageUpload">
      <div class="image-upload-container">
          <div class="image-preview" id="imagePreview">
              <img src="/public/assets/place-holder.png" alt="" id="preview" />
              <div class="upload-text">Click or drag to upload image</div>
          </div>
          <input type="file" id="recipeImage" name="recipeImage" accept="image/*" class="image-input" />
      </div>
  </div>

  <div class="media-upload" id="videoUpload">
      <div class="image-upload-container">
          <div class="image-preview" id="videoPreview">
              <img src="/public/assets/upload-video.svg" alt="" />
              <div class="upload-text">Click or drag to upload video (Max 100MB)</div>
          </div>
          <input type="file" id="recipeVideo" name="recipeVideo" accept="video/*" class="image-input" />
      </div>
      <video controls class="video-preview" style="display: none;"></video>
  </div>
</div>

          <div class="form-group">
            <label for="description">Description</label>
            <textarea id="description" name="description" required></textarea>
          </div>

          <div class="form-group category-cuisine">
            <div class="select-field">
              <label for="category">Category</label>
              <select id="category" name="category" required>
                <option value="">Select category</option>
                <option value="Appetizer">Appetizer</option>
                <option value="Main Course">Main Course</option>
                <option value="Dessert">Dessert</option>
                <option value="Salad">Salad</option>
                <option value="Soup">Soup</option>
                <option value="Beverage">Beverage</option>
                <option value="Snack">Snack</option>
                <option value="Side Dish">Side Dish</option>
              </select>
            </div>

            <div class="select-field">
              <label for="cuisine">Cuisine</label>
              <select id="cuisine" name="cuisine" required>
                <option value="">Select cuisine</option>
                <option value="African">African</option>
                <option value="Asian">Asian</option>
                <option value="European">European</option>
                <option value="American">American</option>
                <option value="Middle Eastern">Middle Eastern</option>
                <option value="Latin American">Latin American</option>
                <option value="Caribbean">Caribbean</option>
                <option value="Oceania">Oceania</option>
                <option value="Fusion">Fusion</option>
                <option value="Other">Other</option>
              </select>
            </div>
          </div>

          <div class="form-group recipe-details">
            <div class="detail-field">
              <label for="difficulty">Difficulty</label>
              <select id="difficulty" name="difficulty" required>
                <option value="">Select difficulty</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
              </select>
            </div>

            <div class="detail-field">
              <label for="servings">Servings</label>
              <input
                type="number"
                id="servings"
                name="servings"
                min="1"
                required
              />
            </div>
          </div>

          <div class="form-group time-inputs">
            <div class="time-field">
              <label for="preparationTime">Preparation Time</label>
              <div class="time-input-wrapper">
                <input
                  type="number"
                  id="preparationTime"
                  name="preparationTime"
                  min="1"
                  required
                />
                <span class="time-unit">minutes</span>
              </div>
            </div>

            <div class="time-field">
              <label for="cookingTime">Cooking Time</label>
              <div class="time-input-wrapper">
                <input
                  type="number"
                  id="cookingTime"
                  name="cookingTime"
                  min="1"
                  required
                />
                <span class="time-unit">minutes</span>
              </div>
            </div>
          </div>

          <div class="form-group">
            <label for="ingredients">Ingredients</label>
            <div class="list-input">
              <input
                type="text"
                id="ingredientInput"
                placeholder="Add an ingredient"
              />
              <button type="button" class="add-btn" onclick="addIngredient()">
                Add
              </button>
            </div>
            <ul id="ingredientsList" class="items-list"></ul>
            <input type="hidden" name="ingredients" id="ingredientsHidden" />
          </div>

          <div class="form-group">
            <label for="steps">Cooking Steps</label>
            <div class="list-input">
              <input type="text" id="stepInput" placeholder="Add a step" />
              <button type="button" class="add-btn" onclick="addStep()">
                Add
              </button>
            </div>
            <ol id="stepsList" class="items-list"></ol>
            <input type="hidden" name="steps" id="stepsHidden" />
          </div>

          <button type="submit" class="submit-btn">Create Recipe</button>
        </form>
      </div>
    </div>
    

    <script>
      // Like button functionality
      document.querySelectorAll(".like-btn").forEach((btn) => {
        btn.addEventListener("click", function () {
          const countSpan = this.querySelector(".like-count");
          const likeIcon = this.querySelector(".like-icon");
          const isLiked = this.dataset.liked === "true";
          let count = parseInt(countSpan.textContent, 10) || 0;

          // Update UI immediately
          this.dataset.liked = (!isLiked).toString();
          likeIcon.src = `/public/assets/${
            !isLiked ? "heartlike.svg" : "heartlike-unlike.svg"
          }`;
          countSpan.textContent = isLiked ? count - 1 : count + 1;

          // Send the like to the server
          fetch(`/user/like/${this.dataset.recipeId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          })
            .then((res) => {
              if (!res.ok) {
                // If server fails, revert changes
                this.dataset.liked = isLiked.toString();
                likeIcon.src = `/public/assets/${
                  isLiked ? "heartlike.svg" : "heartlike-unlike.svg"
                }`;
                countSpan.textContent = count;
              }
            })
            .catch(() => {
              // Revert changes on error
              this.dataset.liked = isLiked.toString();
              likeIcon.src = `/public/assets/${
                isLiked ? "heartlike.svg" : "heartlike-unlike.svg"
              }`;
              countSpan.textContent = count;
            });
        });
      });

      // Share button functionality
      document.querySelectorAll(".share-btn").forEach((btn) => {
        btn.addEventListener("click", function () {
          const shareIcon = this.querySelector(".share-icon");

          // Switch to colored icon
          shareIcon.src = "/public/assets/share.svg";

          // Copy recipe link or show share dialog
          const recipeUrl =
            window.location.origin +
            "/recipe/" +
            this.closest(".recipe-card").dataset.recipeId;

          if (navigator.share) {
            navigator
              .share({
                title: "Check out this recipe!",
                url: recipeUrl,
              })
              .then(() => {
                // Switch back to original icon after 2 seconds
                setTimeout(() => {
                  shareIcon.src = "/public/assets/share-unshare.svg";
                }, 2000);
              })
              .catch(console.error);
          } else {
            // Fallback: Copy to clipboard
            navigator.clipboard.writeText(recipeUrl).then(() => {
              // Show feedback (you might want to add a toast notification here)
              alert("Recipe link copied to clipboard!");

              // Switch back to original icon after 2 seconds
              setTimeout(() => {
                shareIcon.src = "/public/assets/share-unshare.svg";
              }, 2000);
            });
          }
        });
      });

      // Image preview functionality
      const imageInput = document.getElementById("recipeImage");
      const imagePreview = document.getElementById("preview");
      const uploadText = document.querySelector(".upload-text");

      imageInput.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            imagePreview.src = e.target.result;
            imagePreview.style.opacity = "1";
            uploadText.style.display = "none";
          };
          reader.readAsDataURL(file);
        }
      });

      // Drag and drop functionality
      const dropZone = document.querySelector(".image-upload-container");

      ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, preventDefaults, false);
      });

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      ["dragenter", "dragover"].forEach((eventName) => {
        dropZone.addEventListener(eventName, highlight, false);
      });

      ["dragleave", "drop"].forEach((eventName) => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });

      function highlight(e) {
        dropZone.classList.add("highlight");
      }

      function unhighlight(e) {
        dropZone.classList.remove("highlight");
      }

      dropZone.addEventListener("drop", handleDrop, false);

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const file = dt.files[0];
        imageInput.files = dt.files;

        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            imagePreview.src = e.target.result;
            imagePreview.style.opacity = "1";
            uploadText.style.display = "none";
          };
          reader.readAsDataURL(file);
        }
      }
      // Modal functionality
      const modal = document.getElementById("recipeModal");
      const createBtn = document.querySelector(".create-recipe-btn");
      const closeBtn = document.querySelector(".close");

      createBtn.onclick = () => (modal.style.display = "block");
      closeBtn.onclick = () => (modal.style.display = "none");
      window.onclick = (e) => {
        if (e.target === modal) modal.style.display = "none";
      };

      // Ingredients list functionality
      let ingredients = [];
      function addIngredient() {
        const input = document.getElementById("ingredientInput");
        if (input.value.trim()) {
          ingredients.push(input.value.trim());
          updateIngredientsList();
          input.value = "";
        }
      }

      function updateIngredientsList() {
        const list = document.getElementById("ingredientsList");
        const hidden = document.getElementById("ingredientsHidden");
        list.innerHTML = ingredients
          .map(
            (item, index) => `
          <li>${item} <button type="button" onclick="removeIngredient(${index})">×</button></li>
        `
          )
          .join("");
        hidden.value = JSON.stringify(ingredients);
      }
      function removeIngredient(index) {
        ingredients.splice(index, 1);
        updateIngredientsList();
      }

      // Steps list functionality
      let steps = [];
      function addStep() {
        const input = document.getElementById("stepInput");
        if (input.value.trim()) {
          steps.push(input.value.trim());
          updateStepsList();
          input.value = "";
        }
      }

      function updateStepsList() {
        const list = document.getElementById("stepsList");
        const hidden = document.getElementById("stepsHidden");
        list.innerHTML = steps
          .map(
            (item, index) => `
          <li>${item} <button type="button" onclick="removeStep(${index})">×</button></li>
        `
          )
          .join("");
        hidden.value = JSON.stringify(steps);
      }

      function removeStep(index) {
        steps.splice(index, 1);
        updateStepsList();
      }

      // Report functionality
function showReportModal(recipeId, recipeTitle) {
    const modal = document.getElementById('reportModal');
    const titleEl = modal.querySelector('.recipe-title');
    const recipeIdInput = document.getElementById('reportRecipeId');
    
    titleEl.textContent = `Recipe: ${recipeTitle}`;
    recipeIdInput.value = recipeId;
    modal.style.display = 'flex';
}

function closeReportModal() {
    const modal = document.getElementById('reportModal');
    modal.style.display = 'none';
    document.getElementById('reportForm').reset();
}

document.getElementById('reportForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const reportData = {
        reportedItem: document.getElementById('reportRecipeId').value,
        itemType: 'Recipe', // Hardcoded since this is for recipes
        type: document.getElementById('reportType').value,
        reason: document.getElementById('reportReason').value
    };
    
    try {
        const response = await fetch('/user/report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reportData)
        });

        if (!response.ok) throw new Error('Failed to submit report');

        closeReportModal();
        // Show success notification instead of alert
        showNotification('Report submitted successfully', 'success');
    } catch (err) {
        console.error('Error submitting report:', err);
        showNotification('Failed to submit report', 'error');
    }
});

// Add notification function if not already present
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// Close modal on outside click
document.getElementById('reportModal').addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
        closeReportModal();
    }
});

// Close modal on Escape key
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closeReportModal();
    }
});
    </script>
    <script src="/public/js/sidebar.js"></script>
  </body>
</html>
