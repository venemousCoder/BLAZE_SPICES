<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blaze Recipes - Explore</title>
    <link rel="stylesheet" href="/public/css/explore.css">
    <link rel="stylesheet" href="/public/css/home.css">
    <link rel="stylesheet" href="/public/css/sidebar.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="shortcut icon" href="/public/assets/favicon/favicon.ico" type="image/x-icon">
</head>
<body>
    <%- include('./partials/header') %>
    <%- include('./partials/sidebar.ejs')%>
    
    <main class="explore-page">
        <section class="search-section">
            <h1><%= isInitialLoad ? 'Discover Random Recipes' : 'Search Results' %></h1>
            <div class="search-filters">
                <div class="search-bar">
                    <input type="text" id="searchInput" placeholder="Search recipes..." aria-label="Search recipes">
                    <button class="search-btn" aria-label="Search">
                        <img src="../public/assets/search-icon.svg" alt="">
                    </button>
                </div>
                <div class="filters">
                    <select id="categoryFilter" aria-label="Filter by category">
                        <option value="">All Categories</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category.strCategory %>" 
                                    <%= selectedCategory === category.strCategory ? 'selected' : '' %>>
                                <%= category.strCategory %>
                            </option>
                        <% }) %>
                    </select>
                </div>
            </div>
        </section>

        <section class="recipes-grid">
            <% meals.forEach(meal => { %>
                <div class="recipe-card" 
                     data-category="<%= meal.strCategory %>" 
                     data-area="<%= meal.strArea %>">
                    <a href="/user/external/recipe/<%= meal.idMeal %>"
                       class="recipe-card-link">
                        <img src="<%= meal.strMealThumb %>" 
                             alt="<%= meal.strMeal %>" 
                             class="recipe-img">
                        
                        <div class="recipe-info">
                            <h3 class="recipe-title"><%= meal.strMeal %></h3>
                            <div class="recipe-meta">
                                <% if (meal.strCategory) { %>
                                    <span class="category"><%= meal.strCategory %></span>
                                <% } %>
                                <% if (meal.strArea) { %>
                                    <span class="area"><%= meal.strArea %></span>
                                <% } %>
                            </div>
                        </div>
                    </a>
                    <div class="recipe-actions">
                        <button class="save-btn" 
                                aria-label="Save recipe" 
                                data-recipe-id="<%= meal.idMeal %>"
                                data-saved="false">
                            <img src="/public/assets/saved-icon.svg" 
                                 alt="" 
                                 class="save-icon">
                            <span class="save-text">Save</span>
                        </button>
                        <button class="share-btn" 
                                aria-label="Share recipe"
                                data-recipe-url="https://www.themealdb.com/meal/<%= meal.idMeal %>">
                            <img src="/public/assets/share.svg" 
                                 alt="" 
                                 class="share-icon">
                            <span class="share-text">Share</span>
                        </button>
                    </div>
                </div>
            <% }) %>
        </section>
    </main>

    <script>
        
        // Save recipe functionality
        document.querySelectorAll('.save-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const recipeId = this.dataset.recipeId;
                const isSaved = this.dataset.saved === 'true';
                const icon = this.querySelector('.save-icon');
                
                try {
                    const response = await fetch(`/user/external/recipe/${recipeId}/save`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    if (response.ok) {
                        this.dataset.saved = (!isSaved).toString();
                        icon.src = `/public/assets/${!isSaved ? 'bookmark-filled.svg' : 'bookmark.svg'}`;
                    }
                } catch (error) {
                    console.error('Error saving recipe:', error);
                }
            });
        });

        // In explore.ejs script section

document.querySelectorAll('.save-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        const recipeId = this.dataset.recipeId;
        const isSaved = this.dataset.saved === 'true';
        const icon = this.querySelector('.save-icon');
        const text = this.querySelector('.save-text');
        
        try {
            const response = await fetch(`/user/external/recipe/${recipeId}/save`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const data = await response.json();
            if (data.success) {
                this.dataset.saved = (!isSaved).toString();
                icon.src = `/public/assets/${!isSaved ? 'bookmark-filled.svg' : 'bookmark.svg'}`;
                text.textContent = !isSaved ? 'Saved' : 'Save';
                
                // Show feedback
                const feedback = document.createElement('div');
                feedback.className = 'save-feedback';
                feedback.textContent = !isSaved ? 'Recipe saved!' : 'Recipe unsaved';
                document.body.appendChild(feedback);
                
                setTimeout(() => feedback.remove(), 2000);
            }
        } catch (error) {
            console.error('Error saving recipe:', error);
        }
    });
});

        // Share functionality
        document.querySelectorAll('.share-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const recipeUrl = window.location.origin + this.closest('.recipe-card')
                                      .querySelector('.recipe-card-link').getAttribute('href');
                
                if (navigator.share) {
                    try {
                        await navigator.share({
                            title: 'Check out this recipe!',
                            url: recipeUrl
                        });
                    } catch (err) {
                        console.error('Error sharing:', err);
                    }
                } else {
                    // Fallback to clipboard
                    try {
                        await navigator.clipboard.writeText(recipeUrl);
                        alert('Recipe link copied to clipboard!');
                    } catch (err) {
                        console.error('Error copying to clipboard:', err);
                    }
                }
            });
        });

        // Filter functionality
        const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');

    // Handle category filter change
    categoryFilter.addEventListener('change', function() {
        const category = this.value;
        window.location.href = `/user/explore?category=${encodeURIComponent(category)}`;
    });

    // Handle search
    searchInput.addEventListener('input', debounce(function() {
        const query = this.value;
        if (query.length >= 3 || query.length === 0) {
            window.location.href = `/user/explore?q=${encodeURIComponent(query)}`;
        }
    }, 500));

    // Debounce helper
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    </script>
    <script src="/public/js/sidebar.js"></script>
</body>
</html>